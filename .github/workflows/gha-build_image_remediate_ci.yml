name: gha-build_image_remediate_ci

# Trigger workflow on tag push, main branch push, and pull requests
on:
  push:
    tags: [ "*" ]
    branches:
      #- 'main'
      - main
      #- branch-* 
  pull_request:
    branches: [ "**" ]
    
# Environment variables used throughout the workflow
env:

  # Docker configuration
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.ORGANIZATION}}/${{ secrets.IMAGE_NAME }}
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}
  # Use `latest` as the tag to compare to if empty, assuming that it's already pushed
  COMPARE_TAG: latest
  # add flag for build summary
  #DOCKER_BUILD_NO_SUMMARY: false

  
jobs:
  build:

    runs-on: ubuntu-24.04
    # Required permissions for GitHub token
    permissions:
      contents: read
      packages: write
      pull-requests: write
      security-events: write

  #post-build-checks:
    #needs: [build]
    #runs-on: ubuntu-24.04
    #permissions:
      #contents: read
      #packages: write
      #pull-requests: write
      #security-events: write
      
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{github.event_name }} event."
      - run: echo "üêß This job is now running!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      # Build preparation steps
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      
    
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè List files in the repository status is ${{ job.status }}."

          
       # Docker authentication
       # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}
      - run: echo "‚úÖ Log into registry  status is ${{ job.status }}."

      # Setup image metadata
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=,format=short
      - run: echo "‚úÖ Extract Docker metadata status is ${{ job.status }}."

      # Configure Docker BuildX with cloud builder
      - name: Set up Docker Build Cloud se-cloud-builder Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "demonstrationorg/default"
      - run: echo "‚úÖ Set Up Docker Build Cloud cloud-demonstrationorg-default Buildx status is ${{ job.status }}."
      
      # Build and push the Docker image
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          load: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: "linux/amd64,linux/arm64"
          sbom: true
          # Update provenance configuration to use max mode
          provenance: true
          #provenance: mode=max
          # Add build args for additional provenance metadata
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ github.sha }}

        # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}
      - run: echo "‚úÖ Build and push Docker image status is ${{ job.status }}."
    
           
       
    # Basic vulnerability scanning
      # Docker Scout display a quickview, cves, recommendations output
      - name: Analyze for critical and high CVEs
        id: docker-scout-cves
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/scout-action@v1.18.1
        with:
          command: cves
          #command: quickview, cves, recommendations
          image: ${{ steps.meta.outputs.tags }}
          #sarif-file: sarif.output.json
          sarif-file: docker-scout.sarif
          platform: "linux/arm64"
          summary: true
      - run: echo "‚úÖ DOCKER SCOUT Analysis - QuickView, CVEs and Recommendations status is ${{ job.status }}."
         
      - name: Upload SARIF result
        id: upload-sarif
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: docker-scout.sarif
      - run: echo "‚úÖ Upload SARIF result status is ${{ job.status }}."
  

      - name: Check SARIF file existence
        run: |
          if [ ! -f docker-scout.sarif ]; then
            echo "‚ùå SARIF file not found!"
            exit 1
          else
            echo "‚úÖ SARIF file found!"
          fi

    # Compare the image built in the pull request with the one in production
      - name: Docker Scout
        id: docker-scout
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/scout-action@v1.18.1
        with:
          command: compare, recommendations, attestation-add
          image: ${{ steps.meta.outputs.tags }}
          only-severities: critical,high,medium
          exit-code: true
          summary: true
      - run: echo "‚úÖ DOCKER SCOUT Analysis compare image status is ${{ job.status }}."